@using Exam_Objective.Models
@using System.Collections.Generic

@{
    ViewBag.Title = "CreateLesson_Obj";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Basic Form -->
<div class="panel panel-grey margin-bottom-60">
    <div class="panel-heading">
        @{var SubjectsEntity = (List<SubjectsModel>)ViewBag.Subject;

            foreach (var rows in SubjectsEntity)
            {
                <h3><span class="fa  fa-tasks">หน่วยเรียนและวัตถุประสงค์ / วิชา</span>@rows.SubjectName</h3>
            }
        }
        @{var SubjectShareEntity = (List<SubjectsModel>)ViewBag.SubjectShare; 

            foreach (var rows in SubjectShareEntity)
            {
                <h3><span class="fa  fa-tasks">หน่วยเรียนและวัตถุประสงค์ / วิชา</span>@rows.SubjectName</h3>
            }
        }
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            หน่วยเรียนและวัตถุประสงค์
        </div>
        <div class="panel-body">
            @{
                var CateEntity = (List<LessonModel>)ViewBag.Lesson;
                var CateEnnotdis = (List<ObjectiveModel>)ViewBag.ObjectiveNotDis;
                foreach (var r in CateEntity)
                {
                    <div class="col-md-10">
                        <ul>
                            <li>
                                <b>
                                    @r.LesName
                                </b>
                                <ul>
                                    @foreach (var r2 in CateEnnotdis)
                                    {
                                        if (r.LessonID == r2.PLessonID)
                                        {
                                            <li>
                                                @r2.ObjName (@r2.CountProposID)
                                                <a>
                                                    <span class="btnEdit glyphicon glyphicon-cog" data-category="@r2.ObjID" data-catename="@r2.ObjName" title="แก้ไขหมวดหมู่ : @r2.ObjName"></span>
                                                </a>
                                                <a>
                                                    <span class="btnView glyphicon glyphicon-search" data-category="@r2.ObjID" data-catename="@r2.ObjName" title="แสดงรายละเอียดหมวดหมู่ : @r2.ObjName"></span>
                                                </a>
                                                <a>
                                                    <span class="btnDelete glyphicon glyphicon-remove" data-category="@r2.ObjName" data-catename="@r2.ObjName" title="ลบหมวดหมู่ : @r2.ObjName"></span>
                                                </a>
                                            </li>
                                        }
                                    }
                                </ul>
                            </li>
                        </ul>
                        <br />
                    </div>
                }
            }

        </div>
    </div>
    <button class="btn btn-primary" type="button" id="btnCrtLesson"><i class="fa fa-plus-circle"></i> สร้างบทเรียน</button>
    <button class="btn btn-danger" type="button" id="btnCrtOjec"><i class="fa fa-plus-circle"></i> สร้างวัตถุประสงค์</button>
</div>

<form id="formLesson">
    <div id="LessonModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><label id="title" name="title"></label></h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-10">
                                <!--    <input type="hidden" class="form-control" id="isUpdateable" name="isUpdateable" value="1" />
                                <input type="hidden" class="form-control" id="LessonID" name="LessonID" value="0" />       -->
                                <label>ชื่อหน่วยเรียน<span class="required">*</span></label>
                                <input type="text" id="LesName" name="LesName" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-10">
                                <label class="bold">รายละเอียดหน่วยเรียน<span class="required">*</span></label>
                                <textarea type="text" id="TextLesson" name="TextLesson" class="form-control Description"></textarea>
                            </div>
                        </div>
                        <div>
                            <div class="form-group">
                                <div class="col-md-10">
                                    <label>รายวิชา</label>
                                    @{
                                        var subjectEntity = (List<SubjectsModel>)ViewBag.Subject;
                                        var subID = "";
                                        var subname = "";
                                        if (subjectEntity.Count > 0 && subjectEntity != null)
                                        {
                                            foreach (var rows in subjectEntity)
                                            {

                                                <input type="hidden" id="SubjectID" name="SubjectID" class="form-control" />
                                                <input type="text" id="SubjectName" name="SubjectName" class="form-control" />
                                                subID = rows.SubjectID;
                                                subname = rows.SubjectName;


                                            }
                                        }
                                    }

                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-10">
                                    <label>อาจารย์ผู้สอน</label>
                                    @{
                                        var UserEntity = (List<UserSystemModel>)ViewBag.UserIDdata;
                                        var userID = "";
                                        var Fname = "";
                                        var Status = "";
                                        if (UserEntity.Count > 0 && UserEntity != null)
                                        {
                                            foreach (var rows in UserEntity)
                                            {
                                                if (rows.Status == "admin" || rows.Status == "professor")
                                                {
                                                    <input type="hidden" id="UserID" name="UserID" class="form-control" />
                                                    <input type="text" id="Fname" name="Fname" class="form-control" />
                                                    userID = rows.UserID;
                                                    Fname = rows.Fname + " " + rows.Lname;
                                                    Status = rows.Status;
                                                }
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="btnSave" class="btn btn-primary btnSAVE" title="บันทึกการสร้าง แก้ไขหน่วยเรียน">บันทึก</button>
                            <button type="button" id="btnClose" class="btn btn-danger" data-dismiss="modal" title="ยกเลิกการสร้าง แก้ไข และดูรายละเอียดหน่วยเรียน">ยกเลิก</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<form id="formObj">
    <div id="ObjModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><label id="titleOjec" name="titleOjec"></label></h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-10">
                                <!--    <input type="hidden" class="form-control" id="isUpdateable" name="isUpdateable" value="1" />
                                <input type="hidden" class="form-control" id="LessonID" name="LessonID" value="0" />       -->
                                <label>ชื่อวัตถุประสงค์<span class="required">*</span></label>
                                <input type="text" id="ObjName" name="ObjName" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-10">
                                <label class="bold">รายละเอียดจุดประสงค์<span class="required">*</span></label>
                                <textarea type="text" id="TextObj" name="TextObj" class="form-control Description"></textarea>
                            </div>
                        </div>
                        <div>
                            <div class="form-group">
                                <div class="col-md-10">
                                    <label>หน่วยเรียน</label>
                                    <select id="PLessonID" name="PLessonID" class="form-control">
                                        <option selected value="">-- กรุณาเลือกหน่วยเรียน --</option>
                                        @{
                                            var lessonEntity = (List<LessonModel>)ViewBag.Lesson;
                                            foreach (var rows in lessonEntity)
                                            {
                                                int test = rows.LessonID;

                                                <option value='@rows.LessonID'>@rows.LesName</option>

                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="btnSaveObj" class="btn btn-primary btnSAVE" title="บันทึกการสร้าง แก้ไขจุดประสงค์">บันทึก</button>
                            <button type="button" id="btnClose" class="btn btn-danger" data-dismiss="modal" title="ยกเลิกการสร้าง แก้ไข และดูรายละเอียดจุดประสงค์">ยกเลิก</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts{
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.inputmask.bundle.js"></script>
    <script src="~/Scripts/jquery.inputmask.bundle.min.js"></script>
    <script>
                                        
        $("#btnCrtLesson").click(function () {
            //swal("Good job!", "You clicked the button!", "success");
            $("#title").text("เพิ่มหน่วยเรียนทดสอบ");
            $("#btnCrtLesson").find("input").val("");
            $("#LesName").val("");
            $("#TextLesson").val("");
            $("#SubjectID").val("@subID");
            $("#SubjectName").val("@subname");
            $("#UserID").val("@userID");
            $("#Fname").val("@Fname");
            $("#LessonModal").modal("show");
            $("#Fname").prop("readonly", true);
            $("#SubjectName").prop("readonly", true);
            $("#LesName").prop("readonly", false);
            $("#TextLesson").prop("readonly", false);
            $("#btnSave").show()
            tinyMCE.activeEditor.setContent('');  //clear text in tinyeditor
            var valida = $("#formLesson").validate();
            valida.resetForm();
        });
        $('#btnSave').click(function () {
            if ($("#formLesson").valid()) {
                $.ajax({
                    type: "POST",
                    cache: false,
                    url: '@Url.Action("CreateLesson", "ExamBank")',
                    dataType: "json",
                    data: $('#formLesson').serialize(),
                    traditional: true,
                    beforeSend: function(){

                    },

                    success: function (res){
                        var status = false;
                        var message = 'ดำเนินการไม่สำเร็จ';
                        if (res != null && res != undefined) {
                            status = res.status;
                            message = res.message != '' ? res.message : message;
                        }
                        if (status == false) {
                            swal("เกิดข้อผิดพลาด", message, "error");
                        } else {
                            swal({
                                title: "บันทึกสำเร็จ",
                                type: "success",
                                showConfirmButton: false,
                                timer: 1000,
                                closeOnConfirm: false
                            },
                                function () {
                                    location.reload(true);
                                });
                        }
                    },
                    error: function (xhr, ajaxOption, thrownError) {
                        swal("เกิดข้อผิดพลาด", message, "error");
                    },
                    complete: function () {

                    },
                });
            }
        });
        $("#btnCrtOjec").click(function () {
            //swal("Good job!", "You clicked the button!", "success");
            $("#titleOjec").text("เพิ่มจุดประสงค์");
            $("#btnCrtOjec").find("input").val("");
            $("#ObjName").val("");
            $("#TextObj").val("");
            $("#ObjModal").modal("show");
            $("#ObjName").prop("readonly", false);
            $("#TextObj").prop("readonly", false);
            $("#PLessonID").prop("readonly", false);
            $("#btnSave").show()
            tinyMCE.activeEditor.setContent('');  //clear text in tinyeditor
            var valida = $("#formObj").validate();
            valida.resetForm();
        });
        $('#btnSaveObj').click(function () {
            if ($("#formObj").valid()) {
                $.ajax({
                    type: "POST",
                    cache: false,
                    url: '@Url.Action("CreateObj", "ExamBank")',
                    dataType: "json",
                    data: $('#formObj').serialize(),
                    traditional: true,
                    beforeSend: function(){

                    },

                    success: function (res){
                        var status = false;
                        var message = 'ดำเนินการไม่สำเร็จ';
                        if (res != null && res != undefined) {
                            status = res.status;
                            message = res.message != '' ? res.message : message;
                        }
                        if (status == false) {
                            swal("เกิดข้อผิดพลาด", message, "error");
                        } else {
                            swal({
                                title: "บันทึกสำเร็จ",
                                type: "success",
                                showConfirmButton: false,
                                timer: 1000,
                                closeOnConfirm: false
                            },
                                function () {
                                    location.reload(true);
                                });
                        }
                    },
                    error: function (xhr, ajaxOption, thrownError) {
                        swal("เกิดข้อผิดพลาด", message, "error");
                    },
                    complete: function () {

                    },
                });
            }
        });
        //check formLesson
        $("#formLesson").validate({
            errorElement: 'span', //default input error message container
            errorClass: 'help-block', // default input error message class
            focusInvalid: false, // do not focus the last invalid input
            rules: {
                LesName: {
                    required: true
                },
                TextLesson: {
                    required: true
                },               
            },

            messages: {
                LesName: {
                    required: "กรุณาป้อนชื่อหน่วยเรียน"
                },
                TextLesson: {
                    required: "กรุณาป้อนคำอธิบายหน่วยเรียน"
                },                
            },
            invalidHandler: function (event, validator) { //display error alert on form submit
                $('.alert-danger', $("#formLesson")).show();
            },
            highlight: function (element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').addClass('has-error'); // set error class to the control group
            },
            unhighlight: function (element) {
                $(element)
                    .closest('.form-group')
                    .removeClass('has-error');
            },
            success: function (label) {
                label.closest('.form-group').removeClass('has-error');
                label.remove();
            },
            errorPlacement: function (error, element) {
                if (element.parent(".input-group").size() > 0) {
                    error.insertAfter(element.parent(".input-group"));
                } else if (element.attr("data-error-container")) {
                    error.appendTo(element.attr("data-error-container"));
                } else {
                    error.insertAfter(element); // for other inputs, just perform default behavior
                }
            },
            submitHandler: function (form) {
                submit($("#formLesson"));
                return false;
                form.submit();
            }
        });
        //check formObj
        $("#formObj").validate({
            errorElement: 'span', //default input error message container
            errorClass: 'help-block', // default input error message class
            focusInvalid: false, // do not focus the last invalid input
            rules: {
                ObjName: {
                    required: true
                },
                TextObj: {
                    required: true
                },
                PLessonID: {
                    required: true
                },
            },

            messages: {
                ObjName: {
                    required: "กรุณาป้อนชื่อจุดประสงค์"
                },
                TextObj: {
                    required: "กรุณาป้อนรายละเอียดจุดประสงค์"
                },
                PLessonID: {
                    required: "กรุณาป้อนเลือกหน่วยเรียน"
                },
            },
            invalidHandler: function (event, validator) { //display error alert on form submit
                $('.alert-danger', $("#formObj")).show();
            },
            highlight: function (element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').addClass('has-error'); // set error class to the control group
            },
            unhighlight: function (element) {
                $(element)
                    .closest('.form-group')
                    .removeClass('has-error');
            },
            success: function (label) {
                label.closest('.form-group').removeClass('has-error');
                label.remove();
            },
            errorPlacement: function (error, element) {
                if (element.parent(".input-group").size() > 0) {
                    error.insertAfter(element.parent(".input-group"));
                } else if (element.attr("data-error-container")) {
                    error.appendTo(element.attr("data-error-container"));
                } else {
                    error.insertAfter(element); // for other inputs, just perform default behavior
                }
            },
            submitHandler: function (form) {
                submit($("#formObj"));
                return false;
                form.submit();
            }
        });
    </script>

}